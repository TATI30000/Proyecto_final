import tkinter as tk
from PIL import Image, ImageTk
from tkinter import filedialog, messagebox
from pydub import AudioSegment
import numpy as np
import pygame
import tempfile
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import webbrowser
import os

# Filtro de Kalman con implementación de fórmula
class KalmanFilter:
    def __init__(self, process_var, measurement_var):
        self.process_var = process_var  # Q: Varianza del proceso
        self.measurement_var = measurement_var  # R: Varianza de medición
        self.estimate = 0.0  # Estimación inicial
        self.error_cov = 1.0  # Covarianza del error inicial

    def apply(self, data):
        filtered = []
        for value in data:
            # Predicción
            self.error_cov += self.process_var  # Actualización de covarianza de error
            kalman_gain = self.error_cov / (self.error_cov + self.measurement_var)  # Ganancia de Kalman
            self.estimate += kalman_gain * (value - self.estimate)  # Actualización de la estimación
            self.error_cov *= (1 - kalman_gain)  # Actualización de la covarianza de error
            filtered.append(self.estimate)
        return np.array(filtered)

# Función de filtro de Promedio Móvil
def filtro_promedio_movil(data, window_size):
    return np.convolve(data, np.ones(window_size)/window_size, mode='same')

# Función de filtro de Mediana
def filtro_median(data, window_size):
    return np.array([np.median(data[max(i - window_size // 2, 0): min(i + window_size // 2, len(data))]) for i in range(len(data))])

# Función para reproducir el audio
def reproducir(audio):
    if audio:
        pygame.mixer.init()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
            ruta_temporal = temp_file.name
            audio.export(ruta_temporal, format="wav")
        pygame.mixer.music.load(ruta_temporal)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            root.update()

# Función para guardar el audio filtrado
def guardar_audio():
    if audio_filtrado:
        ruta = filedialog.asksaveasfilename(defaultextension=".wav", filetypes=[("Archivos WAV", "*.wav")])
        if ruta:
            audio_filtrado.export(ruta, format="wav")
            messagebox.showinfo("Éxito", "Audio guardado correctamente.")

# Variables globales
audio = audio_ruido = audio_filtrado = None
escala_ruido = escala_proc = escala_meas = None
filtro_seleccionado = None
es_audio_con_ruido = False

# Ventana para seleccionar el tipo de audio (con ruido o sin ruido)
def ventana_seleccion_audio():
    def seleccionar_sin_ruido():
        global es_audio_con_ruido
        es_audio_con_ruido = False
        ventana.destroy()
        ventana_cargar_audio()

    def seleccionar_con_ruido():
        global es_audio_con_ruido
        es_audio_con_ruido = True
        ventana.destroy()
        ventana_cargar_audio()

    ventana = tk.Toplevel(root)
    ventana.title("Seleccionar Tipo de Audio")
    ventana.geometry("400x200")

    # Centrar la ventana en la pantalla
    centrar_ventana(ventana, 400, 200)

    tk.Label(ventana, text="¿Qué tipo de audio deseas cargar?").pack(pady=20)
    tk.Button(ventana, text="Audio sin ruido", command=seleccionar_sin_ruido).pack(pady=10)
    tk.Button(ventana, text="Audio con ruido", command=seleccionar_con_ruido).pack(pady=10)

# Función para centrar ventanas
def centrar_ventana(ventana, ancho, alto):
    # Obtén las dimensiones de la pantalla
    pantalla_ancho = ventana.winfo_screenwidth()
    pantalla_alto = ventana.winfo_screenheight()
    
    # Calcula la posición para centrar la ventana
    x = (pantalla_ancho - ancho) // 2
    y = (pantalla_alto - alto) // 2
    
    # Configura el tamaño y posición de la ventana
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")

# Función para graficar audio
def graficar_audio(audio_graficar, ax, titulo):
    muestras = np.array(audio_graficar.get_array_of_samples())
    tiempo = np.linspace(0, len(muestras) / audio_graficar.frame_rate, num=len(muestras))

    ax.plot(tiempo, muestras, color="blue")
    ax.set_title(titulo)
    ax.set_xlabel("Tiempo (s)")
    ax.set_ylabel("Amplitud")

# Ventana 1: Cargar audio
def ventana_cargar_audio():
    def cargar_audio():
        global audio
        ruta = filedialog.askopenfilename(filetypes=[("Archivos de audio", "*.mp3;*.wav")])
        if ruta:
            audio = AudioSegment.from_file(ruta)
            
            # Limitar la duración del audio a 10 segundos
            duracion_maxima = 10 * 1000  # 10 segundos en milisegundos
            if len(audio) > duracion_maxima:
                audio = audio[:duracion_maxima]
                
            messagebox.showinfo("Éxito", "Audio cargado correctamente.")
            ventana.destroy()
            if es_audio_con_ruido:  # Omitir paso de agregar ruido
                global audio_ruido
                audio_ruido = audio  # Usar el audio original para el filtro
                ventana_tipo_filtro()
            else:
                ventana_grafica_original()


    ventana = tk.Toplevel(root)
    ventana.title("Cargar Audio")
    ventana.geometry("800x600")

    # Centrar la ventana en la pantalla
    centrar_ventana(ventana, 800, 600)

    # Cargar imagen de fondo
    imagen_fondo = Image.open("Aves.png")  
    imagen_fondo = imagen_fondo.resize((700, 600), Image.LANCZOS)  
    fondo_tk = ImageTk.PhotoImage(imagen_fondo)

    # Agregar imagen de fondo con Label y bajarla
    label_fondo = tk.Label(ventana, image=fondo_tk)
    label_fondo.place(x=70, y=50)  # Ajusta los valores de x (horizontal) y y (vertical)

    # Asegurar que la imagen no sea eliminada por el recolector de basura
    label_fondo.image = fondo_tk


    tk.Label(ventana, text="Paso 1: Cargar un archivo de audio").pack(pady=10)
    tk.Button(ventana, text="Cargar Audio", command=cargar_audio).pack(pady=10)

# Función para centrar ventanas
def centrar_ventana(ventana, ancho, alto):
    # Obtén las dimensiones de la pantalla
    pantalla_ancho = ventana.winfo_screenwidth()
    pantalla_alto = ventana.winfo_screenheight()
    
    # Calcula la posición para centrar la ventana
    x = (pantalla_ancho - ancho) // 2
    y = (pantalla_alto - alto) // 2
    
    # Configura el tamaño y posición de la ventana
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")


# Ventana 2: Mostrar gráfica del audio original y agregar ruido
def ventana_grafica_original():
    def agregar_ruido():
        global audio_ruido
        tipo = "blanco"
        ruido = np.random.normal(0, 1, int(audio.frame_rate * len(audio) / 1000))
        ruido = (ruido * 32767 * escala_ruido.get() / 100).astype(np.int16)
        audio_ruido = audio.overlay(AudioSegment(ruido.tobytes(), frame_rate=audio.frame_rate, sample_width=2, channels=1))
        messagebox.showinfo("Éxito", "Ruido agregado correctamente.")

    ventana = tk.Toplevel(root)
    ventana.title("Gráfica del Audio Original y Agregar Ruido")
    ventana.geometry("800x600")

    # Centrar la ventana en la pantalla
    centrar_ventana(ventana, 800, 600)

    tk.Label(ventana, text="Paso 2: Gráfica del Audio Original").pack(pady=10)

    # Frame para la gráfica del audio original y el botón
    frame_original = tk.Frame(ventana)
    frame_original.pack(pady=20)

    fig, ax = plt.subplots(figsize=(5, 3))  # Tamaño reducido de la gráfica
    graficar_audio(audio, ax, "Audio Original")
    canvas = FigureCanvasTkAgg(fig, master=frame_original)
    canvas.get_tk_widget().pack()
    canvas.draw()

    escala_ruido = tk.Scale(ventana, from_=0, to=100, label="Intensidad Ruido", orient="horizontal")
    escala_ruido.pack(pady=10)

    tk.Button(frame_original, text="Agregar Ruido", command=agregar_ruido).pack(pady=10)
    tk.Button(ventana, text="Siguiente", command=ventana_tipo_filtro).pack(pady=20)

# Función para centrar ventanas (si aún no la has definido)
def centrar_ventana(ventana, ancho, alto):
    # Obtén las dimensiones de la pantalla
    pantalla_ancho = ventana.winfo_screenwidth()
    pantalla_alto = ventana.winfo_screenheight()
    
    # Calcula la posición para centrar la ventana
    x = (pantalla_ancho - ancho) // 2
    y = (pantalla_alto - alto) // 2
    
    # Configura el tamaño y posición de la ventana
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")

# Ventana 3: Elección del filtro y mostrar fórmula
def ventana_tipo_filtro():
    def elegir_filtro():
        global filtro_seleccionado
        filtro_seleccionado = filtro_var.get()
        ventana.destroy()
        ventana_aplicar_filtro()

    ventana = tk.Toplevel(root)
    ventana.title("Seleccionar Tipo de Filtro")
    ventana.geometry("800x600")

    # Centrar la ventana en la pantalla
    centrar_ventana(ventana, 800, 600)

    # Cargar imagen de fondo
    imagen_fondo = Image.open("Aplicar.png")  
    imagen_fondo = imagen_fondo.resize((300, 350), Image.LANCZOS)  
    fondo_tk = ImageTk.PhotoImage(imagen_fondo)

    # Agregar imagen de fondo con Label y bajarla
    label_fondo = tk.Label(ventana, image=fondo_tk)
    label_fondo.place(x=250, y=220)  # Ajusta los valores de x (horizontal) y y (vertical)

    # Asegurar que la imagen no sea eliminada por el recolector de basura
    label_fondo.image = fondo_tk

    tk.Label(ventana, text="Paso 3: Seleccionar el tipo de filtro a aplicar").pack(pady=10)

    filtro_var = tk.StringVar()

    # Radio buttons para elegir el filtro
    tk.Radiobutton(ventana, text="Filtro Kalman", variable=filtro_var, value="Kalman").pack(pady=5)
    tk.Radiobutton(ventana, text="Filtro Promedio Móvil", variable=filtro_var, value="Promedio Móvil").pack(pady=5)
    tk.Radiobutton(ventana, text="Filtro Mediana", variable=filtro_var, value="Mediana").pack(pady=5)

    tk.Button(ventana, text="Seleccionar Filtro", command=elegir_filtro).pack(pady=20)

# Función para centrar ventanas (si aún no la has definido)
def centrar_ventana(ventana, ancho, alto):
    # Obtén las dimensiones de la pantalla
    pantalla_ancho = ventana.winfo_screenwidth()
    pantalla_alto = ventana.winfo_screenheight()
    
    # Calcula la posición para centrar la ventana
    x = (pantalla_ancho - ancho) // 2
    y = (pantalla_alto - alto) // 2
    
    # Configura el tamaño y posición de la ventana
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")

# Ventana 4: Gráficas y aplicar filtro
def ventana_aplicar_filtro():
    def aplicar_filtro():
        global audio_filtrado
        muestras = np.array(audio_ruido.get_array_of_samples())
        
        if filtro_seleccionado == "Kalman":
            kalman = KalmanFilter(escala_proc.get() / 1000, escala_meas.get() / 1000)
            filtrado = kalman.apply(muestras).astype(np.int16)
        elif filtro_seleccionado == "Promedio Móvil":
            window_size = escala_proc.get()
            filtrado = filtro_promedio_movil(muestras, window_size=window_size).astype(np.int16)
        elif filtro_seleccionado == "Mediana":
            window_size = escala_proc.get()
            filtrado = filtro_median(muestras, window_size=window_size).astype(np.int16)

        audio_filtrado = AudioSegment(filtrado.tobytes(), frame_rate=audio.frame_rate, sample_width=2, channels=1)
        
        messagebox.showinfo("Éxito", f"Filtro {filtro_seleccionado} aplicado.")
        ventana.destroy()
        ventana_grafica_filtrada()

    ventana = tk.Toplevel(root)
    ventana.title("Aplicar Filtro")
    ventana.geometry("800x600")

    # Centrar la ventana en la pantalla
    centrar_ventana(ventana, 800, 600)

    # Cargar imagen de fondo
    imagen_fondo = Image.open("Filtro1.png")  
    imagen_fondo = imagen_fondo.resize((780, 570), Image.LANCZOS)  
    fondo_tk = ImageTk.PhotoImage(imagen_fondo)

    # Agregar imagen de fondo con Label y bajarla
    label_fondo = tk.Label(ventana, image=fondo_tk)
    label_fondo.place(x=5, y=20)  # Ajusta los valores de x (horizontal) y y (vertical)

    # Asegurar que la imagen no sea eliminada por el recolector de basura
    label_fondo.image = fondo_tk

    # Cargar imagen de fondo
    imagen_fondo = Image.open("Filtro2.png")  
    imagen_fondo = imagen_fondo.resize((600, 370), Image.LANCZOS)  
    fondo_tk = ImageTk.PhotoImage(imagen_fondo)

    # Agregar imagen de fondo con Label y bajarla
    label_fondo = tk.Label(ventana, image=fondo_tk)
    label_fondo.place(x=-10, y=20)  # Ajusta los valores de x (horizontal) y y (vertical)

    # Asegurar que la imagen no sea eliminada por el recolector de basura
    label_fondo.image = fondo_tk
    # Contenedor para centrar elementos
    frame = tk.Frame(ventana)
    frame.pack(expand=True)

# Etiqueta del título centrado
    tk.Label(frame, text="Paso 4: Aplicar el Filtro").pack(pady=10)

# Mostrar la fórmula del filtro seleccionado
    if filtro_seleccionado == "Kalman":
     formula = "Kalman: Estimación = Estimación + (Ganancia de Kalman * (Valor medido - Estimación))"
    elif filtro_seleccionado == "Promedio Móvil":
     formula = "Promedio Móvil: Valor filtrado = Promedio de los valores vecinos en la ventana."
    elif filtro_seleccionado == "Mediana":
     formula = "Mediana: Valor filtrado = Mediana de los valores en la ventana."
    else:
     formula = "Selección de filtro no válida"

# Etiqueta de la fórmula centrada
    label_formula = tk.Label(frame, text=formula, wraplength=700, justify="center")
    label_formula.pack(pady=20)

# Escalas de varianza
    global escala_proc, escala_meas

# Escala para el tamaño de la ventana o varianza
    escala_proc = tk.Scale(frame, from_=1, to=100, length=400, label="Tamaño de Ventana o Varianza", orient="horizontal")
    escala_proc.pack(pady=10)

# Escala para la varianza de medición
    escala_meas = tk.Scale(frame, from_=1, to=100, length=400, label="Varianza de Medición", orient="horizontal")
    escala_meas.pack(pady=10)

# Botón para aplicar el filtro centrado
    tk.Button(frame, text="Aplicar Filtro", command=aplicar_filtro).pack(pady=20)

# Función para centrar ventanas
def centrar_ventana(ventana, ancho, alto):
    # Obtén las dimensiones de la pantalla
    pantalla_ancho = ventana.winfo_screenwidth()
    pantalla_alto = ventana.winfo_screenheight()
    
    # Calcula la posición para centrar la ventana
    x = (pantalla_ancho - ancho) // 2
    y = (pantalla_alto - alto) // 2
    
    # Configura el tamaño y posición de la ventana
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")

# Ventana 5: Gráficas del audio original, con ruido y filtrado con botones de reproducción y guardar
def ventana_grafica_filtrada():
    ventana = tk.Toplevel(root)
    ventana.title("Audio Filtrado")
    ventana.geometry("800x600")

    # Centrar la ventana en la pantalla
    centrar_ventana(ventana, 800, 600)

    tk.Label(ventana, text="Paso 5: Gráficas de los Audios").pack(pady=10)

        # Crear una figura con subgráficas de acuerdo a la opción seleccionada
    if es_audio_con_ruido:
        fig, axs = plt.subplots(1, 2, figsize=(12, 4))  # Solo dos gráficas: Original y Filtrado
        fig.subplots_adjust(hspace=0.5)
        
        # Graficar solo dos audios si el audio ya tiene ruido
        graficar_audio(audio, axs[0], "Audio Original")
        graficar_audio(audio_filtrado, axs[1], "Audio Filtrado")
    else:
        fig, axs = plt.subplots(1, 3, figsize=(12, 4))  # Tres gráficas: Original, Ruido y Filtrado
        fig.subplots_adjust(hspace=0.5)
        
        # Graficar los tres audios si el ruido se agregó manualmente
        graficar_audio(audio, axs[0], "Audio Original")
        graficar_audio(audio_ruido, axs[1], "Audio con Ruido")
        graficar_audio(audio_filtrado, axs[2], "Audio Filtrado")

    # Mostrar la figura con las tres gráficas
    canvas = FigureCanvasTkAgg(fig, master=ventana)
    canvas.get_tk_widget().pack()
    canvas.draw()

    # Frame para los botones de reproducción debajo de cada gráfica
    frame_botones = tk.Frame(ventana)
    frame_botones.pack(side="bottom", pady=10)

    # Reproducir audio original
    frame_original = tk.Frame(frame_botones)
    frame_original.pack(pady=5)
    tk.Button(frame_original, text="Reproducir Original", command=lambda: reproducir(audio)).pack()

    # Reproducir audio filtrado
    frame_filtrado = tk.Frame(frame_botones)
    frame_filtrado.pack(pady=5)
    tk.Button(frame_filtrado, text="Reproducir Filtrado", command=lambda: reproducir(audio_filtrado)).pack()

    # Botón para guardar el audio filtrado
    tk.Button(frame_botones, text="Guardar Audio", command=guardar_audio).pack(pady=10)

# Función para centrar ventanas
def centrar_ventana(ventana, ancho, alto):
    # Obtén las dimensiones de la pantalla
    pantalla_ancho = ventana.winfo_screenwidth()
    pantalla_alto = ventana.winfo_screenheight()
    
    # Calcula la posición para centrar la ventana
    x = (pantalla_ancho - ancho) // 2
    y = (pantalla_alto - alto) // 2
    
    # Configura el tamaño y posición de la ventana
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")

root = tk.Tk()
root.title("Procesador de Audio con Filtro")
root.geometry("1200x700")  # Ajusta el tamaño según necesites

def abrir_link():
    webbrowser.open("https://www.pngwing.com/es/search?q=ayuda")

# Ruta de la imagen
ruta_imagen = "Ayuda.png"

if os.path.exists(ruta_imagen):
    # Cargar y redimensionar la imagen
    icono_img = Image.open(ruta_imagen)
    icono_img = icono_img.resize((35, 35), Image.LANCZOS)
    icono_tk = ImageTk.PhotoImage(icono_img)

    # Guardar referencia globalmente
    root.icono_tk = icono_tk  

    # Crear botón con la imagen
    boton_icono = tk.Button(root, image=root.icono_tk, command=abrir_link, borderwidth=0)
    boton_icono.place(x=1310, y=650)  # Ajusta la posición en la ventana

else:
    print(f"Error: No se encontró la imagen '{ruta_imagen}'")

# Cargar y redimensionar la imagen
img = Image.open("LogoU.png")  # Ruta de la imagen
img = img.resize((1200, 450))  # Cambiar tamaño (ancho, alto) en píxeles
img_tk = ImageTk.PhotoImage(img)

# Crear un Label para la imagen y centrarla
label_img = tk.Label(root, image=img_tk)

# Función para centrar la imagen
def centrar_imagen():
    # Obtener el tamaño de la ventana
    window_width = root.winfo_width()
    window_height = root.winfo_height()

    # Obtener el tamaño de la imagen
    img_width = img.width
    img_height = img.height

    # Calcular las coordenadas para centrar la imagen
    x = (window_width - img_width) // 2
    y = (window_height - img_height) // 2

    # Posicionar la imagen
    label_img.place(x=x, y=y, width=img_width, height=img_height)

# Configurar la ventana para iniciar maximizada
root.state('zoomed')  # Abrir en modo maximizado (sin ocultar la barra de título)

# Llamar a la función para centrar la imagen
root.after(100, centrar_imagen)

# Función para salir del modo maximizado (opcional, en caso de que se desee)
def salir_maximizado(event=None):
    root.state('normal')  # Regresa al tamaño normal

# Asociar la tecla Esc para salir del modo maximizado
root.bind("<Escape>", salir_maximizado)

# Configuración de la ventana inicial
tk.Label(root, text="Procesador de Audio con Filtro").pack(pady=20)
tk.Button(root, text="Iniciar", command=ventana_seleccion_audio).pack()
root.mainloop()
